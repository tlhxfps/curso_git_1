-- Comandos GIT --

1- git init // Cria a pasta .git oculta, ou seja, iniciar um projeto.

// Comentario //
// A branch master no git hub se chama main, houve apenas alteração na nomeclatura. //

2- Criar um repositório no git hub e seguir os passos abaixo.

- echo "# curso_git_1" >> README.md // Criar uma pasta README.md , porém pode ser qualquer outro arquivo, txt, html etc...
- git init // Criar a pasta .git oculta.
- git add README.md // Adicionando o primeiro arquivo, nesse caso está utilizando o README.md
- git commit -m "first commit" // Primeiro Commit
- git branch -M main // Criando a branch principal, nesse caso era master, porém agora é  main.
- git remote add origin https://github.com/tlhxfps/curso_git_1.git // Local do remote correto.
- git push -u origin main // Push na branch main/master.

-- Outros comandos --
- git remote -v // Mostra os remotes desse init.
- git remote rm origin // remove o remote origin que existe.
- git status // Verificar o status dos arquivos, commit, push etc...
- git config --global user.email "you@example.com" // Ao executar o primeiro commit, aparece essas configurações, com isso é  necessario adicionar um e-mail.
- git config --global user.name "Your Name" // mesma coisa do caso acima, porém nesse caso é necessario adicionar um nome.

- git status // Monitora arquivos não monitorados, arquivos modificados, arquivos excluidos e criado.
- git add exemplo.txt // adicionando arquivo exemplo.txt para o repositório criado.
- git add . // adicionando todos os arquivos da pasta para o repositório.
- git commit exemplo.txt -m "Enviando arquivo exemplo.txt" // Fazendo o commit do arquivo exemplo.txt
- git commit -a -m "Enviando todos os commits" // Fazendo o commit de todos os arquivos que foram adicionados.
- git push // Enviar os commites enviados.
- git pull // busca atualizações/inclusões e inclui na sua máquina.
- git clone https://github.com/tlhxfps/curso_git_1.git . // comando que realiza o clone do projeto, o ponto no final apenas para criar na pasta informada.
- git rm // remove arquivo desnecessário, em seguida é necessário enviar um git commit e git push.
- git log // verificar os commits enviados.
- git mv // Renomear e alterar o local de arquivos. exemplo: git mv rodape.css css/rodape.css ou git mv roda_pe.css rodape.css
- git checkout arquivo.css // Resenta as modificações desse arquivo, com isso ele deixa o arquivo conforme está o git.  

- git reset --hard origin/main ou origin/master // reseta até o ultimo push, ou seja, todos os commites que enviei sem fazer o push não vão mais existir, pois irá retorna as configurações do ultimo push.

-- Não comandos --

- .gitignore // criar um arquivo chamado .gitignore e dentro dele incluir os arquivos ou pasta que não serão enviados para o github. exemplos:
Arquivo: .gitignore 
Dentro do arquivo: 
d.txt
pastateste/* --> ignora todos os arquivos dentro dessa pasta.

-- Branches --

- git branch // verifica quais branches possui
- git branch <nome_branch> // cria uma nova branch, lembrando de sempre criar brach apartir da main/master.
- git branch -d <nome_branch> ou git branch --delete <nome> // deleta uma branch, tomem cuidado, pois esse comando não é muito utilizado.
- git checkout <nome_branch> // faz com que você troque de branch
- git checkout -b <nova_branch> // faz com que você mude e crie uma nova branch.
OBS: Atenção, nunca mudar de branch antes de fazer o commit na branch que você está usando no momento, pois ao trocar de branch as alterações vão para que você trocou, não a anterior.
Lembrando também, de sempre criar uma branch através da master/main, pois é la que está o código principal, caso criei em outra branch, as alterações que foram commitadas e push, vao para essa nova branch.
- git merge <nome_branch> // com esse comando você junta as alterações de uma branch para a que você está no momento, exemplo: possui 2 branch, uma branch_1 e outra branch_2, caso eu faça uma alteração na branch_1 e quero que a branch_2 tenha essa atualização eu faço o merge dentro da banche_2 utilizando o comando git merge branch_1.
Obs: tomem cuidado ao fazer esse merge na master/main, caso seja um projeto pessoal ok, porém se for na empresa nunca fazer, pois precisa ser aprovado e testado antes.
- git stash // funciona como se fosse uma lixeira, exemplo: você faz alguma alteração nessa branch, com isso você vê que está fazendo algumas coisa erras, então você executa esse comando para que essa branch resent porém fique salva as alterações em outro local, sem perdelas.
- git stash list // mostra a lista de stash criadas acima.
- git stash apply <numero_da_lista_stash> // aplica as alterações do stash que você criou anteriormente.
- git stash show -p <numero_da_lista_stash> // verifica quais foram as alterações dos arquivos nesse stash.